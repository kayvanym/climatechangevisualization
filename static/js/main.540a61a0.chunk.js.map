{"version":3,"sources":["component/CO2Emission.jsx","component/Temperature.jsx","component/GlacierSize.jsx","component/SeaLevel.jsx","component/CO2List.jsx","component/CO2PieChart.jsx","component/NavBar.jsx","component/NotFound.jsx","component/GlacierSizeSeaLevel.jsx","component/Rebecca.jsx","component/AllCharts.jsx","App.js","serviceWorker.js","index.js"],"names":["CO2Emission","Fragment","style","fontSize","fontWeight","width","height","data","this","props","CO2data","margin","top","right","left","bottom","strokeDasharray","dataKey","verticalAlign","type","stroke","activeDot","r","Component","Temperature","Tempdata","GlacierSize","Glacierdata","SeaLevel","SeaLeveldata","CO2List","CO2EmissionData","sort","a","b","Year","length","className","map","co2","key","to","MyPieChart","match","params","index","findIndex","parseInt","undefined","dataPieChart","name","value","COLORS","onClick","history","push","float","cx","cy","outerRadius","fill","label","layout","NavBar","state","class","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","NotFound","GlacierSizeSeaLevel","galciersizedata","filter","x","sealeveldata","Time","series","color","GMSL","console","log","category","allowDuplicatedCategory","cursor","strokeWidth","s","Rebecca","seaLevel","concStr","substring","min","max","neg","Math","round","pos","year","GMSLUncertain","GMSLPos","GMSLNeg","opacity","onChange","onValueChange","defaultValue","AllCharts2","GlobalTemp","fetch","CO2response","json","GlobalTempresponse","GlobalTempdata","GlacierSizeresponse","GlacierSizedata","SearLevelresponse","SearLeveldata","setState","path","render","component","from","exact","App","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.540a61a0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  Label\r\n} from \"recharts\";\r\n\r\nclass CO2Emission extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n          CO2 Emission (million metric tons)\r\n        </p>\r\n        <LineChart\r\n          width={1400}\r\n          height={500}\r\n          data={this.props.CO2data}\r\n          margin={{\r\n            top: 10,\r\n            right: 30,\r\n            left: 50,\r\n            bottom: 50\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\"></CartesianGrid>\r\n\r\n          <XAxis dataKey=\"Year\"></XAxis>\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend verticalAlign=\"top\" />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"Total\"\r\n            stroke=\"#8884d8\"\r\n            activeDot={{ r: 8 }}\r\n          />\r\n          <Line type=\"monotone\" dataKey=\"Gas Fuel\" stroke=\"#82ca9d\" />\r\n          <Line type=\"monotone\" dataKey=\"Liquid Fuel\" stroke=\"orange\" />\r\n          <Line type=\"monotone\" dataKey=\"Solid Fuel\" stroke=\"blue\" />\r\n          <Line type=\"monotone\" dataKey=\"Cement\" stroke=\"black\" />\r\n          <Line type=\"monotone\" dataKey=\"Gas Flaring\" stroke=\"maroon\" />\r\n        </LineChart>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CO2Emission;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  Label\r\n} from \"recharts\";\r\n\r\nclass Temperature extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n          Global Temprature\r\n        </p>\r\n        <LineChart\r\n          width={1400}\r\n          height={500}\r\n          data={this.props.Tempdata}\r\n          margin={{\r\n            top: 10,\r\n            right: 30,\r\n            left: 50,\r\n            bottom: 50\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Year\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend verticalAlign=\"top\" />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"Mean\"\r\n            stroke=\"#8884d8\"\r\n            activeDot={{ r: 12 }}\r\n          />\r\n        </LineChart>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Temperature;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  Label\r\n} from \"recharts\";\r\n\r\nclass GlacierSize extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n          Glaciers Size (meters of water equivalent - Base Year 1945)\r\n        </p>\r\n        <LineChart\r\n          width={1400}\r\n          height={500}\r\n          data={this.props.Glacierdata}\r\n          margin={{\r\n            top: 10,\r\n            right: 30,\r\n            left: 50,\r\n            bottom: 50\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Year\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend verticalAlign=\"top\" />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"Mean cumulative mass balance\"\r\n            stroke=\"#8884d8\"\r\n            activeDot={{ r: 8 }}\r\n          />\r\n        </LineChart>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlacierSize;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  Label\r\n} from \"recharts\";\r\n\r\nclass SeaLevel extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>Sea Level(in mm)</p>\r\n        <LineChart\r\n          width={1400}\r\n          height={500}\r\n          data={this.props.SeaLeveldata}\r\n          margin={{\r\n            top: 10,\r\n            right: 30,\r\n            left: 50,\r\n            bottom: 50\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Time\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend verticalAlign=\"top\" />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"GMSL\"\r\n            stroke=\"#8884d8\"\r\n            activeDot={{ r: 8 }}\r\n          />\r\n        </LineChart>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeaLevel;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass CO2List extends Component {\r\n  render() {\r\n    let CO2EmissionData = this.props.CO2data;\r\n    CO2EmissionData = CO2EmissionData.sort((a, b) =>\r\n      a.Year < b.Year ? 1 : b.Year < a.Year ? -1 : 0\r\n    );\r\n    if (CO2EmissionData.length === 0) return <p>There is not data</p>;\r\n\r\n    return (\r\n      <table className=\"ui single line table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Year</th>\r\n            <th>Total</th>\r\n            <th>Gas Fuel</th>\r\n            <th>Liquid Fuel</th>\r\n            <th>Solid Fuel</th>\r\n            <th>Cement</th>\r\n            <th>Gas Flaring</th>\r\n            <th>Per Capita</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {CO2EmissionData.map(co2 => (\r\n            <tr key={co2.Year}>\r\n              <td>\r\n                <Link to={\"/co2/\" + co2.Year}>{co2.Year}</Link>\r\n              </td>\r\n              <td>{co2[\"Total\"]}</td>\r\n              <td>{co2[\"Gas Fuel\"]}</td>\r\n              <td>{co2[\"Liquid Fuel\"]}</td>\r\n              <td>{co2[\"Cement\"]}</td>\r\n              <td>{co2[\"Gas Flaring\"]}</td>\r\n              <td>{co2[\"Gas Fuel\"]}</td>\r\n              <td>{co2[\"Per Capita\"]}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CO2List;\r\n","import React, { Component } from \"react\";\r\nimport { PieChart, Pie, Sector, Cell, Legend } from \"recharts\";\r\n\r\nexport default class MyPieChart extends Component {\r\n  render() {\r\n    //let { allPers } = this.props;\r\n    let CO2EmissionData = this.props.CO2data;\r\n    let Year = this.props.match.params.Year;\r\n    let index = CO2EmissionData.findIndex(co2 => co2.Year === parseInt(Year));\r\n\r\n    let co2 = CO2EmissionData[index];\r\n    if (co2 === undefined) return <p>There is no data.</p>;\r\n\r\n    const dataPieChart = [\r\n      { name: \"Gas Fuel\", value: parseInt(co2[\"Gas Fuel\"]) },\r\n      { name: \"Liquid Fuel\", value: co2[\"Liquid Fuel\"] },\r\n      { name: \"Solid Fuel\", value: co2[\"Solid Fuel\"] },\r\n      { name: \"Cement\", value: co2[\"Cement\"] }\r\n    ];\r\n    const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#BB8042\"];\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.props.history.push(\"/co2list\")}\r\n        >\r\n          Back\r\n        </button>\r\n        <div style={{ width: \"650px\", height: \"600px\", float: \"left\" }}>\r\n          <PieChart width={650} height={600}>\r\n            <Pie\r\n              data={dataPieChart}\r\n              dataKey=\"value\"\r\n              cx={300}\r\n              cy={250}\r\n              outerRadius={190}\r\n              fill=\"#82ca9d\"\r\n              label\r\n            >\r\n              <Cell fill={COLORS[0]} />)\r\n              <Cell fill={COLORS[1]} />)\r\n              <Cell fill={COLORS[2]} />)\r\n              <Cell fill={COLORS[3]} />)\r\n              <Cell fill={COLORS[4]} />)\r\n            </Pie>\r\n            <Legend layout=\"vertical\" />\r\n          </PieChart>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//export default Table;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavBar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <Link class=\"navbar-brand\" to=\"/co2\">\r\n          Climate Change\r\n        </Link>\r\n        <button\r\n          class=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul class=\"navbar-nav\">\r\n            <li class=\"nav-item active\">\r\n              <Link class=\"nav-link\" to=\"/co2\">\r\n                CO2 <span class=\"sr-only\">(current)</span>\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <Link class=\"nav-link\" to=\"/globaltemp\">\r\n                Global Temp\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <Link class=\"nav-link\" to=\"/glaciersize\">\r\n                Glacier Size\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <Link class=\"nav-link\" to=\"/sealevel\">\r\n                Sea Level\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <Link class=\"nav-link\" to=\"/co2list\">\r\n                CO2 List\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <Link class=\"nav-link\" to=\"/glaciersizesealevel\">\r\n                Glacier Size/Sea Level\r\n              </Link>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <Link class=\"nav-link\" to=\"/test1\">\r\n                Test 1\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NotFound extends Component {\r\n  state = {};\r\n  render() {\r\n    return <h1>Page Not Found</h1>;\r\n  }\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend\r\n} from \"recharts\";\r\n\r\nclass GlacierSizeSeaLevel extends Component {\r\n  render() {\r\n    let galciersizedata = this.props.Glacierdata.filter(\r\n      x => x.Year > 1945 && x.Year <= 2010\r\n    );\r\n    let sealeveldata = this.props.SeaLeveldata.filter(\r\n      x => parseInt(x.Time) > 1945 && parseInt(x.Time) <= 2010\r\n    );\r\n    let series = [\r\n      {\r\n        name: \"Sea Level Data\",\r\n        data: [],\r\n        color: \"blue\"\r\n      },\r\n      {\r\n        name: \"Glacier Data\",\r\n        data: [],\r\n        color: \"orange\"\r\n      }\r\n    ];\r\n\r\n    galciersizedata.map(data =>\r\n      series[1].data.push({\r\n        Year: parseInt(data.Year),\r\n        value: data[\"Mean cumulative mass balance\"]\r\n      })\r\n    );\r\n\r\n    sealeveldata.map(data =>\r\n      series[0].data.push({\r\n        Year: parseInt(data.Time),\r\n        value: data.GMSL\r\n      })\r\n    );\r\n\r\n    console.log(series);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n          Glaciers Size vs. Sea Level\r\n        </p>\r\n\r\n        <LineChart\r\n          width={1400}\r\n          height={500}\r\n          margin={{\r\n            top: 10,\r\n            right: 30,\r\n            left: 50,\r\n            bottom: 50\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"Year\"\r\n            category=\"Year\"\r\n            allowDuplicatedCategory={false}\r\n          />\r\n          <YAxis dataKey=\"value\" />\r\n          <Tooltip cursor={{ stroke: \"green\", strokeWidth: 3 }} />\r\n          <Legend />\r\n          {series.map(s => (\r\n            <Line\r\n              dataKey=\"value\"\r\n              data={s.data}\r\n              name={s.name}\r\n              key={s.name}\r\n              stroke={s.color}\r\n            />\r\n          ))}\r\n        </LineChart>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlacierSizeSeaLevel;\r\n","import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  /*LineChart,*/ Area,\r\n  /*Line,*/ XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend\r\n} from \"recharts\";\r\n\r\nimport { Range } from \"rc-slider\";\r\n\r\n//Functional Component\r\nconst Rebecca = props => {\r\n  let data = [];\r\n  console.log(props.data);\r\n  props.data.map(seaLevel => {\r\n    //map ≈ for each. Each object iterated in the data array is called a \"seaLevel\"\r\n    let concStr = parseInt(seaLevel.Time.substring(0, 4)); // sets year to 1990 format instead of 1990-03-15 and converts to number (from string)\r\n    if (\r\n      concStr + 1 > props.min &&\r\n      concStr - 1 < props.max &&\r\n      concStr < 2015 &&\r\n      concStr > 1939\r\n    ) {\r\n      //calculates min and max value based on information sent from slider (from App.js)\r\n      const neg = Math.round(seaLevel.GMSL - seaLevel[\"GMSL uncertainty\"]); //sets negativ uncertainty from GMSL value - uncertainty\r\n      const pos = Math.round(seaLevel.GMSL + seaLevel[\"GMSL uncertainty\"]); //sets positive uncertainty from GMSL value + uncertainty\r\n      console.log(concStr);\r\n      console.log(seaLevel.GMSL);\r\n      console.log(neg);\r\n      console.log(pos);\r\n\r\n      // also the genious who came up with the idea of including a \"space\" in their api is to be commended!\r\n      {\r\n        data.push({\r\n          //pushes the selected data into the const data declared at line 10\r\n          year: concStr,\r\n          GMSL: Math.round(seaLevel.GMSL),\r\n          GMSLUncertain: seaLevel[\"GMSL uncertainty\"],\r\n          GMSLPos: pos,\r\n          GMSLNeg: neg\r\n        });\r\n      }\r\n    }\r\n    //return data; // unsure if this does anything but react got sad at one point where I did'nt include a return...\r\n  });\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      <h5 className=\"card-title-graph\">Waterlevels now and then</h5>\r\n      <p className=\"chartP\">\r\n        The graph shows the water levels throughout the years. Slide the\r\n        applicator to see how the levels changes from 1945-2014.\r\n      </p>\r\n      <p className=\"descriptionCentimeter\">Centimeter</p>\r\n      <p className=\"descriptionYear\">Year</p>\r\n      <AreaChart //LineChart uses Lines || AreaChart uses Area\r\n        width={800}\r\n        height={600}\r\n        data={data}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"year\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"GMSL\"\r\n          stroke=\"#000\"\r\n          fill=\"#000\"\r\n          activeDot={{ r: 8 }}\r\n          opacity={0.5}\r\n        />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"GMSLPos\"\r\n          stroke=\"#b4e2f0\"\r\n          fill=\"#b4e2f0\"\r\n        />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"GMSLNeg\"\r\n          stroke=\"#b4e2f0\"\r\n          fill=\"#b4e2f0\"\r\n        />\r\n      </AreaChart>\r\n\r\n      <div id=\"slider\">\r\n        <Range\r\n          min={1940}\r\n          max={2014}\r\n          onChange={props.onValueChange}\r\n          defaultValue={[1990, 2000]}\r\n        />\r\n        <p className=\"slider-text\">Try It!</p>\r\n      </div>\r\n    </div>\r\n  ); // The Line || Area above must match the chart ie. either LineChart for Line or AreaChart for Area\r\n};\r\n\r\nexport default Rebecca;\r\n","import React, { Component } from \"react\";\r\n\r\n//us the following 4 \"imports\" if you want to load data from json files\r\n//import { getCO2Emissionsdata } from \"../data/CO2Emission\";\r\n//import { getGlobalTempdata } from \"../data/GlobalTemp\";\r\n//import { getGlacierSizedata } from \"../data/GlacierSize\";\r\n//import { getSeaLeveldata } from \"../data/SeaLevel\";\r\nimport CO2Emission from \"./CO2Emission\";\r\nimport Temperature from \"./Temperature\";\r\nimport GlacierSize from \"./GlacierSize\";\r\nimport SeaLevel from \"./SeaLevel\";\r\nimport CO2List from \"./CO2List\";\r\nimport CO2PieChart from \"./CO2PieChart\";\r\nimport NavBar from \"./NavBar\";\r\nimport NotFound from \"./NotFound\";\r\nimport GlacierSizeSeaLevel from \"./GlacierSizeSeaLevel\";\r\nimport Rebecca from \"./Rebecca\";\r\n\r\nimport { Route, Redirect, Switch } from \"react-router-dom\";\r\nexport default class AllCharts2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      CO2Emission: [],\r\n      GlobalTemp: [],\r\n      GlacierSize: [],\r\n      SeaLevel: []\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const CO2url = \"https://my.api.mockaroo.com/co2.json?key=8eb9e6f0\";\r\n    const CO2response = await fetch(CO2url);\r\n    const CO2data = await CO2response.json();\r\n\r\n    const GlobalTempurl = \"https://my.api.mockaroo.com/temp.json?key=8eb9e6f0\";\r\n    const GlobalTempresponse = await fetch(GlobalTempurl);\r\n    let GlobalTempdata = await GlobalTempresponse.json();\r\n    GlobalTempdata = GlobalTempdata.sort((a, b) =>\r\n      a.Year > b.Year ? 1 : b.Year > a.Year ? -1 : 0\r\n    );\r\n\r\n    const GlacierSizeurl =\r\n      \"https://my.api.mockaroo.com/glaciersize.json?key=8eb9e6f0\";\r\n    const GlacierSizeresponse = await fetch(GlacierSizeurl);\r\n    const GlacierSizedata = await GlacierSizeresponse.json();\r\n\r\n    const SearLevelurl =\r\n      \"https://my.api.mockaroo.com/sealevel.json?key=8eb9e6f0\";\r\n    const SearLevelresponse = await fetch(SearLevelurl);\r\n    const SearLeveldata = await SearLevelresponse.json();\r\n\r\n    //use the following code block when you want to load data from API\r\n    this.setState({\r\n      CO2Emission: CO2data,\r\n      GlobalTemp: GlobalTempdata,\r\n      GlacierSize: GlacierSizedata,\r\n      SeaLevel: SearLeveldata\r\n    });\r\n\r\n    //use the following code block when you want to load data from json files\r\n    /*\r\n    this.setState({\r\n      CO2Emission: getCO2Emissionsdata(),\r\n      GlobalTemp: getGlobalTempdata().sort((a, b) =>\r\n        a.Year > b.Year ? 1 : b.Year > a.Year ? -1 : 0\r\n      ),\r\n      GlacierSize: getGlacierSizedata(),\r\n      SeaLevel: getSeaLeveldata()\r\n    });\r\n  */\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar></NavBar>\r\n        <Switch>\r\n          <Route\r\n            path=\"/co2/:Year\"\r\n            render={props => (\r\n              <CO2PieChart {...props} CO2data={this.state.CO2Emission} />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/co2\"\r\n            render={props => (\r\n              <CO2Emission {...props} CO2data={this.state.CO2Emission} />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/globaltemp\"\r\n            render={props => (\r\n              <Temperature {...props} Tempdata={this.state.GlobalTemp} />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/glaciersize\"\r\n            render={props => (\r\n              <GlacierSize {...props} Glacierdata={this.state.GlacierSize} />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/sealevel\"\r\n            render={props => (\r\n              <SeaLevel {...props} SeaLeveldata={this.state.SeaLevel} />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/co2list\"\r\n            render={props => (\r\n              <CO2List {...props} CO2data={this.state.CO2Emission} />\r\n            )}\r\n          />\r\n\r\n          <Route\r\n            path=\"/glaciersizesealevel\"\r\n            render={props => (\r\n              <GlacierSizeSeaLevel\r\n                {...props}\r\n                Glacierdata={this.state.GlacierSize}\r\n                SeaLeveldata={this.state.SeaLevel}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/test1\"\r\n            render={props => (\r\n              <Rebecca\r\n                {...props}\r\n                data={this.state.SeaLevel}\r\n                min={1940}\r\n                max={2014}\r\n              />\r\n            )}\r\n          />\r\n          <Route path=\"/notfound\" component={NotFound} />\r\n          <Redirect from=\"/\" exact to=\"/co2\"></Redirect>\r\n          <Redirect from=\"/climatechangevisualization\" to=\"/co2\"></Redirect>\r\n          <Redirect to=\"/notfound\"></Redirect>\r\n        </Switch>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport AllCharts from \"./component/AllCharts\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <AllCharts />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}